// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: file.proto

package lobbypb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PlayerInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PlayerInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlayerInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PlayerInfoMultiError, or
// nil if none found.
func (m *PlayerInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *PlayerInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlayerId

	// no validation rules for PlayerName

	// no validation rules for IsHost

	if len(errors) > 0 {
		return PlayerInfoMultiError(errors)
	}

	return nil
}

// PlayerInfoMultiError is an error wrapping multiple validation errors
// returned by PlayerInfo.ValidateAll() if the designated constraints aren't met.
type PlayerInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlayerInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlayerInfoMultiError) AllErrors() []error { return m }

// PlayerInfoValidationError is the validation error returned by
// PlayerInfo.Validate if the designated constraints aren't met.
type PlayerInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlayerInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlayerInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlayerInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlayerInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlayerInfoValidationError) ErrorName() string { return "PlayerInfoValidationError" }

// Error satisfies the builtin error interface
func (e PlayerInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlayerInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlayerInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlayerInfoValidationError{}

// Validate checks the field values on CreateRoomRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateRoomRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoomRequestMultiError, or nil if none found.
func (m *CreateRoomRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoomRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlayerId

	// no validation rules for PlayerName

	if len(errors) > 0 {
		return CreateRoomRequestMultiError(errors)
	}

	return nil
}

// CreateRoomRequestMultiError is an error wrapping multiple validation errors
// returned by CreateRoomRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateRoomRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoomRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoomRequestMultiError) AllErrors() []error { return m }

// CreateRoomRequestValidationError is the validation error returned by
// CreateRoomRequest.Validate if the designated constraints aren't met.
type CreateRoomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoomRequestValidationError) ErrorName() string {
	return "CreateRoomRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoomRequestValidationError{}

// Validate checks the field values on CreateRoomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRoomResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoomResponseMultiError, or nil if none found.
func (m *CreateRoomResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoomResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomId

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return CreateRoomResponseMultiError(errors)
	}

	return nil
}

// CreateRoomResponseMultiError is an error wrapping multiple validation errors
// returned by CreateRoomResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateRoomResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoomResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoomResponseMultiError) AllErrors() []error { return m }

// CreateRoomResponseValidationError is the validation error returned by
// CreateRoomResponse.Validate if the designated constraints aren't met.
type CreateRoomResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoomResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoomResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoomResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoomResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoomResponseValidationError) ErrorName() string {
	return "CreateRoomResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoomResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoomResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoomResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoomResponseValidationError{}

// Validate checks the field values on JoinRoomRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *JoinRoomRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinRoomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JoinRoomRequestMultiError, or nil if none found.
func (m *JoinRoomRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinRoomRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomId

	// no validation rules for PlayerId

	// no validation rules for PlayerName

	if len(errors) > 0 {
		return JoinRoomRequestMultiError(errors)
	}

	return nil
}

// JoinRoomRequestMultiError is an error wrapping multiple validation errors
// returned by JoinRoomRequest.ValidateAll() if the designated constraints
// aren't met.
type JoinRoomRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinRoomRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinRoomRequestMultiError) AllErrors() []error { return m }

// JoinRoomRequestValidationError is the validation error returned by
// JoinRoomRequest.Validate if the designated constraints aren't met.
type JoinRoomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinRoomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinRoomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinRoomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinRoomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinRoomRequestValidationError) ErrorName() string { return "JoinRoomRequestValidationError" }

// Error satisfies the builtin error interface
func (e JoinRoomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinRoomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinRoomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinRoomRequestValidationError{}

// Validate checks the field values on JoinRoomResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *JoinRoomResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinRoomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JoinRoomResponseMultiError, or nil if none found.
func (m *JoinRoomResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinRoomResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return JoinRoomResponseMultiError(errors)
	}

	return nil
}

// JoinRoomResponseMultiError is an error wrapping multiple validation errors
// returned by JoinRoomResponse.ValidateAll() if the designated constraints
// aren't met.
type JoinRoomResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinRoomResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinRoomResponseMultiError) AllErrors() []error { return m }

// JoinRoomResponseValidationError is the validation error returned by
// JoinRoomResponse.Validate if the designated constraints aren't met.
type JoinRoomResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinRoomResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinRoomResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinRoomResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinRoomResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinRoomResponseValidationError) ErrorName() string { return "JoinRoomResponseValidationError" }

// Error satisfies the builtin error interface
func (e JoinRoomResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinRoomResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinRoomResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinRoomResponseValidationError{}

// Validate checks the field values on LeaveRoomRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LeaveRoomRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LeaveRoomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LeaveRoomRequestMultiError, or nil if none found.
func (m *LeaveRoomRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LeaveRoomRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomId

	// no validation rules for PlayerId

	if len(errors) > 0 {
		return LeaveRoomRequestMultiError(errors)
	}

	return nil
}

// LeaveRoomRequestMultiError is an error wrapping multiple validation errors
// returned by LeaveRoomRequest.ValidateAll() if the designated constraints
// aren't met.
type LeaveRoomRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LeaveRoomRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LeaveRoomRequestMultiError) AllErrors() []error { return m }

// LeaveRoomRequestValidationError is the validation error returned by
// LeaveRoomRequest.Validate if the designated constraints aren't met.
type LeaveRoomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LeaveRoomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LeaveRoomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LeaveRoomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LeaveRoomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LeaveRoomRequestValidationError) ErrorName() string { return "LeaveRoomRequestValidationError" }

// Error satisfies the builtin error interface
func (e LeaveRoomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLeaveRoomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LeaveRoomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LeaveRoomRequestValidationError{}

// Validate checks the field values on LeaveRoomResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LeaveRoomResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LeaveRoomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LeaveRoomResponseMultiError, or nil if none found.
func (m *LeaveRoomResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LeaveRoomResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return LeaveRoomResponseMultiError(errors)
	}

	return nil
}

// LeaveRoomResponseMultiError is an error wrapping multiple validation errors
// returned by LeaveRoomResponse.ValidateAll() if the designated constraints
// aren't met.
type LeaveRoomResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LeaveRoomResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LeaveRoomResponseMultiError) AllErrors() []error { return m }

// LeaveRoomResponseValidationError is the validation error returned by
// LeaveRoomResponse.Validate if the designated constraints aren't met.
type LeaveRoomResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LeaveRoomResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LeaveRoomResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LeaveRoomResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LeaveRoomResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LeaveRoomResponseValidationError) ErrorName() string {
	return "LeaveRoomResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LeaveRoomResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLeaveRoomResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LeaveRoomResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LeaveRoomResponseValidationError{}

// Validate checks the field values on ListMembersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMembersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMembersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMembersRequestMultiError, or nil if none found.
func (m *ListMembersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMembersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomId

	if len(errors) > 0 {
		return ListMembersRequestMultiError(errors)
	}

	return nil
}

// ListMembersRequestMultiError is an error wrapping multiple validation errors
// returned by ListMembersRequest.ValidateAll() if the designated constraints
// aren't met.
type ListMembersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMembersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMembersRequestMultiError) AllErrors() []error { return m }

// ListMembersRequestValidationError is the validation error returned by
// ListMembersRequest.Validate if the designated constraints aren't met.
type ListMembersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMembersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMembersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMembersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMembersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMembersRequestValidationError) ErrorName() string {
	return "ListMembersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMembersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMembersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMembersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMembersRequestValidationError{}

// Validate checks the field values on ListMembersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMembersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMembersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMembersResponseMultiError, or nil if none found.
func (m *ListMembersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMembersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPlayers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMembersResponseValidationError{
						field:  fmt.Sprintf("Players[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMembersResponseValidationError{
						field:  fmt.Sprintf("Players[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMembersResponseValidationError{
					field:  fmt.Sprintf("Players[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListMembersResponseMultiError(errors)
	}

	return nil
}

// ListMembersResponseMultiError is an error wrapping multiple validation
// errors returned by ListMembersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListMembersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMembersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMembersResponseMultiError) AllErrors() []error { return m }

// ListMembersResponseValidationError is the validation error returned by
// ListMembersResponse.Validate if the designated constraints aren't met.
type ListMembersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMembersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMembersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMembersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMembersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMembersResponseValidationError) ErrorName() string {
	return "ListMembersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMembersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMembersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMembersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMembersResponseValidationError{}

// Validate checks the field values on PlayerSentMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlayerSentMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlayerSentMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlayerSentMessageRequestMultiError, or nil if none found.
func (m *PlayerSentMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PlayerSentMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomId

	// no validation rules for PlayerId

	// no validation rules for Message

	if len(errors) > 0 {
		return PlayerSentMessageRequestMultiError(errors)
	}

	return nil
}

// PlayerSentMessageRequestMultiError is an error wrapping multiple validation
// errors returned by PlayerSentMessageRequest.ValidateAll() if the designated
// constraints aren't met.
type PlayerSentMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlayerSentMessageRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlayerSentMessageRequestMultiError) AllErrors() []error { return m }

// PlayerSentMessageRequestValidationError is the validation error returned by
// PlayerSentMessageRequest.Validate if the designated constraints aren't met.
type PlayerSentMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlayerSentMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlayerSentMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlayerSentMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlayerSentMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlayerSentMessageRequestValidationError) ErrorName() string {
	return "PlayerSentMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PlayerSentMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlayerSentMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlayerSentMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlayerSentMessageRequestValidationError{}

// Validate checks the field values on PlayerSentMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlayerSentMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlayerSentMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlayerSentMessageResponseMultiError, or nil if none found.
func (m *PlayerSentMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PlayerSentMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return PlayerSentMessageResponseMultiError(errors)
	}

	return nil
}

// PlayerSentMessageResponseMultiError is an error wrapping multiple validation
// errors returned by PlayerSentMessageResponse.ValidateAll() if the
// designated constraints aren't met.
type PlayerSentMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlayerSentMessageResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlayerSentMessageResponseMultiError) AllErrors() []error { return m }

// PlayerSentMessageResponseValidationError is the validation error returned by
// PlayerSentMessageResponse.Validate if the designated constraints aren't met.
type PlayerSentMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlayerSentMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlayerSentMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlayerSentMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlayerSentMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlayerSentMessageResponseValidationError) ErrorName() string {
	return "PlayerSentMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PlayerSentMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlayerSentMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlayerSentMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlayerSentMessageResponseValidationError{}

// Validate checks the field values on PlayerJoinedBroadcast with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlayerJoinedBroadcast) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlayerJoinedBroadcast with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlayerJoinedBroadcastMultiError, or nil if none found.
func (m *PlayerJoinedBroadcast) ValidateAll() error {
	return m.validate(true)
}

func (m *PlayerJoinedBroadcast) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomId

	if all {
		switch v := interface{}(m.GetPlayer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlayerJoinedBroadcastValidationError{
					field:  "Player",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlayerJoinedBroadcastValidationError{
					field:  "Player",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlayer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlayerJoinedBroadcastValidationError{
				field:  "Player",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Timestamp

	if len(errors) > 0 {
		return PlayerJoinedBroadcastMultiError(errors)
	}

	return nil
}

// PlayerJoinedBroadcastMultiError is an error wrapping multiple validation
// errors returned by PlayerJoinedBroadcast.ValidateAll() if the designated
// constraints aren't met.
type PlayerJoinedBroadcastMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlayerJoinedBroadcastMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlayerJoinedBroadcastMultiError) AllErrors() []error { return m }

// PlayerJoinedBroadcastValidationError is the validation error returned by
// PlayerJoinedBroadcast.Validate if the designated constraints aren't met.
type PlayerJoinedBroadcastValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlayerJoinedBroadcastValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlayerJoinedBroadcastValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlayerJoinedBroadcastValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlayerJoinedBroadcastValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlayerJoinedBroadcastValidationError) ErrorName() string {
	return "PlayerJoinedBroadcastValidationError"
}

// Error satisfies the builtin error interface
func (e PlayerJoinedBroadcastValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlayerJoinedBroadcast.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlayerJoinedBroadcastValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlayerJoinedBroadcastValidationError{}

// Validate checks the field values on PlayerLeftBroadcast with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlayerLeftBroadcast) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlayerLeftBroadcast with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlayerLeftBroadcastMultiError, or nil if none found.
func (m *PlayerLeftBroadcast) ValidateAll() error {
	return m.validate(true)
}

func (m *PlayerLeftBroadcast) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomId

	if all {
		switch v := interface{}(m.GetPlayer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlayerLeftBroadcastValidationError{
					field:  "Player",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlayerLeftBroadcastValidationError{
					field:  "Player",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlayer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlayerLeftBroadcastValidationError{
				field:  "Player",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Timestamp

	if len(errors) > 0 {
		return PlayerLeftBroadcastMultiError(errors)
	}

	return nil
}

// PlayerLeftBroadcastMultiError is an error wrapping multiple validation
// errors returned by PlayerLeftBroadcast.ValidateAll() if the designated
// constraints aren't met.
type PlayerLeftBroadcastMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlayerLeftBroadcastMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlayerLeftBroadcastMultiError) AllErrors() []error { return m }

// PlayerLeftBroadcastValidationError is the validation error returned by
// PlayerLeftBroadcast.Validate if the designated constraints aren't met.
type PlayerLeftBroadcastValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlayerLeftBroadcastValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlayerLeftBroadcastValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlayerLeftBroadcastValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlayerLeftBroadcastValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlayerLeftBroadcastValidationError) ErrorName() string {
	return "PlayerLeftBroadcastValidationError"
}

// Error satisfies the builtin error interface
func (e PlayerLeftBroadcastValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlayerLeftBroadcast.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlayerLeftBroadcastValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlayerLeftBroadcastValidationError{}

// Validate checks the field values on ChatMessageBroadcast with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChatMessageBroadcast) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatMessageBroadcast with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatMessageBroadcastMultiError, or nil if none found.
func (m *ChatMessageBroadcast) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatMessageBroadcast) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomId

	if all {
		switch v := interface{}(m.GetPlayer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChatMessageBroadcastValidationError{
					field:  "Player",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChatMessageBroadcastValidationError{
					field:  "Player",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlayer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChatMessageBroadcastValidationError{
				field:  "Player",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Message

	// no validation rules for Timestamp

	if len(errors) > 0 {
		return ChatMessageBroadcastMultiError(errors)
	}

	return nil
}

// ChatMessageBroadcastMultiError is an error wrapping multiple validation
// errors returned by ChatMessageBroadcast.ValidateAll() if the designated
// constraints aren't met.
type ChatMessageBroadcastMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatMessageBroadcastMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatMessageBroadcastMultiError) AllErrors() []error { return m }

// ChatMessageBroadcastValidationError is the validation error returned by
// ChatMessageBroadcast.Validate if the designated constraints aren't met.
type ChatMessageBroadcastValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatMessageBroadcastValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatMessageBroadcastValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatMessageBroadcastValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatMessageBroadcastValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatMessageBroadcastValidationError) ErrorName() string {
	return "ChatMessageBroadcastValidationError"
}

// Error satisfies the builtin error interface
func (e ChatMessageBroadcastValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatMessageBroadcast.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatMessageBroadcastValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatMessageBroadcastValidationError{}

// Validate checks the field values on RoomEventRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RoomEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoomEventRequestMultiError, or nil if none found.
func (m *RoomEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomId

	if len(errors) > 0 {
		return RoomEventRequestMultiError(errors)
	}

	return nil
}

// RoomEventRequestMultiError is an error wrapping multiple validation errors
// returned by RoomEventRequest.ValidateAll() if the designated constraints
// aren't met.
type RoomEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomEventRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomEventRequestMultiError) AllErrors() []error { return m }

// RoomEventRequestValidationError is the validation error returned by
// RoomEventRequest.Validate if the designated constraints aren't met.
type RoomEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomEventRequestValidationError) ErrorName() string { return "RoomEventRequestValidationError" }

// Error satisfies the builtin error interface
func (e RoomEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomEventRequestValidationError{}

// Validate checks the field values on RoomEvent with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoomEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoomEventMultiError, or nil
// if none found.
func (m *RoomEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Event.(type) {
	case *RoomEvent_PlayerJoined:
		if v == nil {
			err := RoomEventValidationError{
				field:  "Event",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPlayerJoined()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RoomEventValidationError{
						field:  "PlayerJoined",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RoomEventValidationError{
						field:  "PlayerJoined",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPlayerJoined()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoomEventValidationError{
					field:  "PlayerJoined",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RoomEvent_PlayerLeft:
		if v == nil {
			err := RoomEventValidationError{
				field:  "Event",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPlayerLeft()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RoomEventValidationError{
						field:  "PlayerLeft",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RoomEventValidationError{
						field:  "PlayerLeft",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPlayerLeft()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoomEventValidationError{
					field:  "PlayerLeft",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RoomEvent_ChatMessageBroadcast:
		if v == nil {
			err := RoomEventValidationError{
				field:  "Event",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetChatMessageBroadcast()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RoomEventValidationError{
						field:  "ChatMessageBroadcast",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RoomEventValidationError{
						field:  "ChatMessageBroadcast",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetChatMessageBroadcast()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoomEventValidationError{
					field:  "ChatMessageBroadcast",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return RoomEventMultiError(errors)
	}

	return nil
}

// RoomEventMultiError is an error wrapping multiple validation errors returned
// by RoomEvent.ValidateAll() if the designated constraints aren't met.
type RoomEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomEventMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomEventMultiError) AllErrors() []error { return m }

// RoomEventValidationError is the validation error returned by
// RoomEvent.Validate if the designated constraints aren't met.
type RoomEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomEventValidationError) ErrorName() string { return "RoomEventValidationError" }

// Error satisfies the builtin error interface
func (e RoomEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomEventValidationError{}
