// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: file.proto

package lobbypbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	gen "go-connect/gen"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RoomServiceName is the fully-qualified name of the RoomService service.
	RoomServiceName = "lobby.RoomService"
	// RoomBroadcastName is the fully-qualified name of the RoomBroadcast service.
	RoomBroadcastName = "lobby.RoomBroadcast"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RoomServiceCreateRoomProcedure is the fully-qualified name of the RoomService's CreateRoom RPC.
	RoomServiceCreateRoomProcedure = "/lobby.RoomService/CreateRoom"
	// RoomServiceJoinRoomProcedure is the fully-qualified name of the RoomService's JoinRoom RPC.
	RoomServiceJoinRoomProcedure = "/lobby.RoomService/JoinRoom"
	// RoomServiceLeaveRoomProcedure is the fully-qualified name of the RoomService's LeaveRoom RPC.
	RoomServiceLeaveRoomProcedure = "/lobby.RoomService/LeaveRoom"
	// RoomServiceListMembersProcedure is the fully-qualified name of the RoomService's ListMembers RPC.
	RoomServiceListMembersProcedure = "/lobby.RoomService/ListMembers"
	// RoomServiceSendMessageProcedure is the fully-qualified name of the RoomService's SendMessage RPC.
	RoomServiceSendMessageProcedure = "/lobby.RoomService/SendMessage"
	// RoomBroadcastStreamRoomEventsProcedure is the fully-qualified name of the RoomBroadcast's
	// StreamRoomEvents RPC.
	RoomBroadcastStreamRoomEventsProcedure = "/lobby.RoomBroadcast/StreamRoomEvents"
)

// RoomServiceClient is a client for the lobby.RoomService service.
type RoomServiceClient interface {
	CreateRoom(context.Context, *connect.Request[gen.CreateRoomRequest]) (*connect.Response[gen.CreateRoomResponse], error)
	JoinRoom(context.Context, *connect.Request[gen.JoinRoomRequest]) (*connect.Response[gen.JoinRoomResponse], error)
	LeaveRoom(context.Context, *connect.Request[gen.LeaveRoomRequest]) (*connect.Response[gen.LeaveRoomResponse], error)
	ListMembers(context.Context, *connect.Request[gen.ListMembersRequest]) (*connect.Response[gen.ListMembersResponse], error)
	SendMessage(context.Context, *connect.Request[gen.PlayerSentMessageRequest]) (*connect.Response[gen.PlayerSentMessageResponse], error)
}

// NewRoomServiceClient constructs a client for the lobby.RoomService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRoomServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RoomServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	roomServiceMethods := gen.File_file_proto.Services().ByName("RoomService").Methods()
	return &roomServiceClient{
		createRoom: connect.NewClient[gen.CreateRoomRequest, gen.CreateRoomResponse](
			httpClient,
			baseURL+RoomServiceCreateRoomProcedure,
			connect.WithSchema(roomServiceMethods.ByName("CreateRoom")),
			connect.WithClientOptions(opts...),
		),
		joinRoom: connect.NewClient[gen.JoinRoomRequest, gen.JoinRoomResponse](
			httpClient,
			baseURL+RoomServiceJoinRoomProcedure,
			connect.WithSchema(roomServiceMethods.ByName("JoinRoom")),
			connect.WithClientOptions(opts...),
		),
		leaveRoom: connect.NewClient[gen.LeaveRoomRequest, gen.LeaveRoomResponse](
			httpClient,
			baseURL+RoomServiceLeaveRoomProcedure,
			connect.WithSchema(roomServiceMethods.ByName("LeaveRoom")),
			connect.WithClientOptions(opts...),
		),
		listMembers: connect.NewClient[gen.ListMembersRequest, gen.ListMembersResponse](
			httpClient,
			baseURL+RoomServiceListMembersProcedure,
			connect.WithSchema(roomServiceMethods.ByName("ListMembers")),
			connect.WithClientOptions(opts...),
		),
		sendMessage: connect.NewClient[gen.PlayerSentMessageRequest, gen.PlayerSentMessageResponse](
			httpClient,
			baseURL+RoomServiceSendMessageProcedure,
			connect.WithSchema(roomServiceMethods.ByName("SendMessage")),
			connect.WithClientOptions(opts...),
		),
	}
}

// roomServiceClient implements RoomServiceClient.
type roomServiceClient struct {
	createRoom  *connect.Client[gen.CreateRoomRequest, gen.CreateRoomResponse]
	joinRoom    *connect.Client[gen.JoinRoomRequest, gen.JoinRoomResponse]
	leaveRoom   *connect.Client[gen.LeaveRoomRequest, gen.LeaveRoomResponse]
	listMembers *connect.Client[gen.ListMembersRequest, gen.ListMembersResponse]
	sendMessage *connect.Client[gen.PlayerSentMessageRequest, gen.PlayerSentMessageResponse]
}

// CreateRoom calls lobby.RoomService.CreateRoom.
func (c *roomServiceClient) CreateRoom(ctx context.Context, req *connect.Request[gen.CreateRoomRequest]) (*connect.Response[gen.CreateRoomResponse], error) {
	return c.createRoom.CallUnary(ctx, req)
}

// JoinRoom calls lobby.RoomService.JoinRoom.
func (c *roomServiceClient) JoinRoom(ctx context.Context, req *connect.Request[gen.JoinRoomRequest]) (*connect.Response[gen.JoinRoomResponse], error) {
	return c.joinRoom.CallUnary(ctx, req)
}

// LeaveRoom calls lobby.RoomService.LeaveRoom.
func (c *roomServiceClient) LeaveRoom(ctx context.Context, req *connect.Request[gen.LeaveRoomRequest]) (*connect.Response[gen.LeaveRoomResponse], error) {
	return c.leaveRoom.CallUnary(ctx, req)
}

// ListMembers calls lobby.RoomService.ListMembers.
func (c *roomServiceClient) ListMembers(ctx context.Context, req *connect.Request[gen.ListMembersRequest]) (*connect.Response[gen.ListMembersResponse], error) {
	return c.listMembers.CallUnary(ctx, req)
}

// SendMessage calls lobby.RoomService.SendMessage.
func (c *roomServiceClient) SendMessage(ctx context.Context, req *connect.Request[gen.PlayerSentMessageRequest]) (*connect.Response[gen.PlayerSentMessageResponse], error) {
	return c.sendMessage.CallUnary(ctx, req)
}

// RoomServiceHandler is an implementation of the lobby.RoomService service.
type RoomServiceHandler interface {
	CreateRoom(context.Context, *connect.Request[gen.CreateRoomRequest]) (*connect.Response[gen.CreateRoomResponse], error)
	JoinRoom(context.Context, *connect.Request[gen.JoinRoomRequest]) (*connect.Response[gen.JoinRoomResponse], error)
	LeaveRoom(context.Context, *connect.Request[gen.LeaveRoomRequest]) (*connect.Response[gen.LeaveRoomResponse], error)
	ListMembers(context.Context, *connect.Request[gen.ListMembersRequest]) (*connect.Response[gen.ListMembersResponse], error)
	SendMessage(context.Context, *connect.Request[gen.PlayerSentMessageRequest]) (*connect.Response[gen.PlayerSentMessageResponse], error)
}

// NewRoomServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRoomServiceHandler(svc RoomServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	roomServiceMethods := gen.File_file_proto.Services().ByName("RoomService").Methods()
	roomServiceCreateRoomHandler := connect.NewUnaryHandler(
		RoomServiceCreateRoomProcedure,
		svc.CreateRoom,
		connect.WithSchema(roomServiceMethods.ByName("CreateRoom")),
		connect.WithHandlerOptions(opts...),
	)
	roomServiceJoinRoomHandler := connect.NewUnaryHandler(
		RoomServiceJoinRoomProcedure,
		svc.JoinRoom,
		connect.WithSchema(roomServiceMethods.ByName("JoinRoom")),
		connect.WithHandlerOptions(opts...),
	)
	roomServiceLeaveRoomHandler := connect.NewUnaryHandler(
		RoomServiceLeaveRoomProcedure,
		svc.LeaveRoom,
		connect.WithSchema(roomServiceMethods.ByName("LeaveRoom")),
		connect.WithHandlerOptions(opts...),
	)
	roomServiceListMembersHandler := connect.NewUnaryHandler(
		RoomServiceListMembersProcedure,
		svc.ListMembers,
		connect.WithSchema(roomServiceMethods.ByName("ListMembers")),
		connect.WithHandlerOptions(opts...),
	)
	roomServiceSendMessageHandler := connect.NewUnaryHandler(
		RoomServiceSendMessageProcedure,
		svc.SendMessage,
		connect.WithSchema(roomServiceMethods.ByName("SendMessage")),
		connect.WithHandlerOptions(opts...),
	)
	return "/lobby.RoomService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RoomServiceCreateRoomProcedure:
			roomServiceCreateRoomHandler.ServeHTTP(w, r)
		case RoomServiceJoinRoomProcedure:
			roomServiceJoinRoomHandler.ServeHTTP(w, r)
		case RoomServiceLeaveRoomProcedure:
			roomServiceLeaveRoomHandler.ServeHTTP(w, r)
		case RoomServiceListMembersProcedure:
			roomServiceListMembersHandler.ServeHTTP(w, r)
		case RoomServiceSendMessageProcedure:
			roomServiceSendMessageHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRoomServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRoomServiceHandler struct{}

func (UnimplementedRoomServiceHandler) CreateRoom(context.Context, *connect.Request[gen.CreateRoomRequest]) (*connect.Response[gen.CreateRoomResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("lobby.RoomService.CreateRoom is not implemented"))
}

func (UnimplementedRoomServiceHandler) JoinRoom(context.Context, *connect.Request[gen.JoinRoomRequest]) (*connect.Response[gen.JoinRoomResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("lobby.RoomService.JoinRoom is not implemented"))
}

func (UnimplementedRoomServiceHandler) LeaveRoom(context.Context, *connect.Request[gen.LeaveRoomRequest]) (*connect.Response[gen.LeaveRoomResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("lobby.RoomService.LeaveRoom is not implemented"))
}

func (UnimplementedRoomServiceHandler) ListMembers(context.Context, *connect.Request[gen.ListMembersRequest]) (*connect.Response[gen.ListMembersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("lobby.RoomService.ListMembers is not implemented"))
}

func (UnimplementedRoomServiceHandler) SendMessage(context.Context, *connect.Request[gen.PlayerSentMessageRequest]) (*connect.Response[gen.PlayerSentMessageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("lobby.RoomService.SendMessage is not implemented"))
}

// RoomBroadcastClient is a client for the lobby.RoomBroadcast service.
type RoomBroadcastClient interface {
	StreamRoomEvents(context.Context, *connect.Request[gen.RoomEventRequest]) (*connect.ServerStreamForClient[gen.RoomEvent], error)
}

// NewRoomBroadcastClient constructs a client for the lobby.RoomBroadcast service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRoomBroadcastClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RoomBroadcastClient {
	baseURL = strings.TrimRight(baseURL, "/")
	roomBroadcastMethods := gen.File_file_proto.Services().ByName("RoomBroadcast").Methods()
	return &roomBroadcastClient{
		streamRoomEvents: connect.NewClient[gen.RoomEventRequest, gen.RoomEvent](
			httpClient,
			baseURL+RoomBroadcastStreamRoomEventsProcedure,
			connect.WithSchema(roomBroadcastMethods.ByName("StreamRoomEvents")),
			connect.WithClientOptions(opts...),
		),
	}
}

// roomBroadcastClient implements RoomBroadcastClient.
type roomBroadcastClient struct {
	streamRoomEvents *connect.Client[gen.RoomEventRequest, gen.RoomEvent]
}

// StreamRoomEvents calls lobby.RoomBroadcast.StreamRoomEvents.
func (c *roomBroadcastClient) StreamRoomEvents(ctx context.Context, req *connect.Request[gen.RoomEventRequest]) (*connect.ServerStreamForClient[gen.RoomEvent], error) {
	return c.streamRoomEvents.CallServerStream(ctx, req)
}

// RoomBroadcastHandler is an implementation of the lobby.RoomBroadcast service.
type RoomBroadcastHandler interface {
	StreamRoomEvents(context.Context, *connect.Request[gen.RoomEventRequest], *connect.ServerStream[gen.RoomEvent]) error
}

// NewRoomBroadcastHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRoomBroadcastHandler(svc RoomBroadcastHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	roomBroadcastMethods := gen.File_file_proto.Services().ByName("RoomBroadcast").Methods()
	roomBroadcastStreamRoomEventsHandler := connect.NewServerStreamHandler(
		RoomBroadcastStreamRoomEventsProcedure,
		svc.StreamRoomEvents,
		connect.WithSchema(roomBroadcastMethods.ByName("StreamRoomEvents")),
		connect.WithHandlerOptions(opts...),
	)
	return "/lobby.RoomBroadcast/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RoomBroadcastStreamRoomEventsProcedure:
			roomBroadcastStreamRoomEventsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRoomBroadcastHandler returns CodeUnimplemented from all methods.
type UnimplementedRoomBroadcastHandler struct{}

func (UnimplementedRoomBroadcastHandler) StreamRoomEvents(context.Context, *connect.Request[gen.RoomEventRequest], *connect.ServerStream[gen.RoomEvent]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("lobby.RoomBroadcast.StreamRoomEvents is not implemented"))
}
